package com.demo.nginx.ip;

import org.junit.jupiter.api.Test;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class IPRangeTest {


    @Test
    public void test_uniauth_ip_in_range() throws Exception {

        Pattern pattern = Pattern.compile("^(10\\.248\\.13\\.([4-9]|1[0-1]|6[5-9]|[7-9][0-9]))|(10\\.1\\.249\\.(4[6-9]|1[2-9]|2[0-3]))|(10\\.26\\.2\\.([2-5][0-9]|6[0-5]))|(10\\.27\\.10\\.([5-9][0-9]|1[0-5][0-9]))$");

        String[] ips = {
                "10.248.13.4",
                "10.248.13.5",
                "10.248.13.6",
                "10.248.13.7",
                "10.248.13.8",
                "10.248.13.9",
                "10.248.13.10",
                "10.248.13.11",
                "10.248.13.65",
                "10.248.13.66",
                "10.248.13.67",
                "10.248.13.68",
                "10.248.13.69",
                "10.248.13.70",
                "10.248.13.71",
                "10.248.13.72",
                "10.248.13.73",
                "10.248.13.74",
                "10.248.13.75",
                "10.248.13.76",
                "10.248.13.77",
                "10.248.13.78",
                "10.248.13.79",
                "10.248.13.80",
                "10.248.13.81",
                "10.248.13.82",
                "10.248.13.83",
                "10.248.13.84",
                "10.248.13.85",
                "10.248.13.86",
                "10.248.13.87",
                "10.248.13.88",
                "10.248.13.89",
                "10.248.13.90",
                "10.248.13.91",
                "10.248.13.92",
                "10.248.13.93",
                "10.248.13.94",
                "10.248.13.95",
                "10.248.13.96",
                "10.248.13.97",
                "10.248.13.98",
                "10.1.249.46",
                "10.1.249.47",
                "10.1.249.49",
                "10.1.249.12",
                "10.1.249.13",
                "10.1.249.14",
                "10.1.249.15",
                "10.1.249.16",
                "10.1.249.17",
                "10.1.249.18",
                "10.1.249.19",
                "10.1.249.20",
                "10.1.249.21",
                "10.1.249.22",
                "10.1.249.23",
                "10.26.2.20",
                "10.26.2.21",
                "10.26.2.22",
                "10.26.2.23",
                "10.26.2.24",
                "10.26.2.25",
                "10.26.2.26",
                "10.26.2.27",
                "10.26.2.28",
                "10.26.2.29",
                "10.26.2.30",
                "10.26.2.31",
                "10.26.2.32",
                "10.26.2.33",
                "10.26.2.34",
                "10.26.2.35",
                "10.26.2.36",
                "10.26.2.37",
                "10.26.2.38",
                "10.26.2.39",
                "10.26.2.58",
                "10.26.2.60",
                "10.26.2.59",
                "10.26.2.40",
                "10.26.2.41",
                "10.26.2.42",
                "10.26.2.43",
                "10.26.2.44",
                "10.26.2.45",
                "10.26.2.46",
                "10.26.2.47",
                "10.26.2.48",
                "10.26.2.49",
                "10.26.2.50",
                "10.26.2.51",
                "10.26.2.52",
                "10.26.2.53",
                "10.26.2.54",
                "10.26.2.55",
                "10.26.2.56",
                "10.26.2.57",
                "10.26.2.61",
                "10.26.2.62",
                "10.26.2.63",
                "10.26.2.64",
                "10.26.2.65",
                "10.27.10.50",
                "10.27.10.51",
                "10.27.10.52",
                "10.27.10.53",
                "10.27.10.54",
                "10.27.10.55",
                "10.27.10.56",
                "10.27.10.57",
                "10.27.10.58",
                "10.27.10.59",
                "10.27.10.60",
                "10.27.10.61",
                "10.27.10.62",
                "10.27.10.63",
                "10.27.10.64",
                "10.27.10.65",
                "10.27.10.66",
                "10.27.10.67",
                "10.27.10.68",
                "10.27.10.69",
                "10.27.10.70",
                "10.27.10.71",
                "10.27.10.72",
                "10.27.10.73",
                "10.27.10.74",
                "10.27.10.75",
                "10.27.10.76",
                "10.27.10.77",
                "10.27.10.78",
                "10.27.10.79",
                "10.27.10.80",
                "10.27.10.81",
                "10.27.10.82",
                "10.27.10.83",
                "10.27.10.84",
                "10.27.10.85",
                "10.27.10.86",
                "10.27.10.87",
                "10.27.10.88",
                "10.27.10.89",
                "10.27.10.90",
                "10.27.10.91",
                "10.27.10.92",
                "10.27.10.93",
                "10.27.10.94",
                "10.27.10.95",
                "10.27.10.96",
                "10.27.10.97",
                "10.27.10.98",
                "10.27.10.99",
                "10.27.10.100",
                "10.27.10.101",
                "10.27.10.102",
                "10.27.10.103",
                "10.27.10.104",
                "10.27.10.105",
                "10.27.10.106",
                "10.27.10.107",
                "10.27.10.108",
                "10.27.10.109",
                "10.27.10.110",
                "10.27.10.111",
                "10.27.10.112",
                "10.27.10.113",
                "10.27.10.114",
                "10.27.10.115",
                "10.27.10.116",
                "10.27.10.117",
                "10.27.10.118",
                "10.27.10.119",
                "10.27.10.120",
                "10.27.10.121",
                "10.27.10.122",
                "10.27.10.123",
                "10.27.10.124",
                "10.27.10.125",
                "10.27.10.126",
                "10.27.10.127",
                "10.27.10.128",
                "10.27.10.129",
                "10.27.10.130",
                "10.27.10.131",
                "10.27.10.132",
                "10.27.10.133",
                "10.27.10.134",
                "10.27.10.135",
                "10.27.10.136",
                "10.27.10.137",
                "10.27.10.138",
                "10.27.10.139",
                "10.27.10.140",
                "10.27.10.141",
                "10.27.10.142",
                "10.27.10.143",
                "10.27.10.144",
                "10.27.10.145",
                "10.27.10.146",
                "10.27.10.147",
                "10.27.10.148",
                "10.27.10.149",
                "10.27.10.150",
                "10.27.10.151",
                "10.27.10.152",
                "10.27.10.153",
                "10.27.10.154",
                "10.27.10.155",
                "10.27.10.156",
                "10.27.10.157",
                "10.27.10.158"
        };

        for (String ip : ips) {
            Matcher matcher = pattern.matcher(ip);
            //System.out.println("IP: " + ip);
            assertTrue(matcher.find());
        }


    }


    @Test
    void test_4a_ip_in_range() throws Exception {

        Pattern pattern = Pattern.compile("^(10\\.255\\.246\\.(78|8[1-4]))|(10\\.27\\.9\\.(2[8-9]|3|3[0-2]|35))|(10.248.9.101)$");

        String[] ips = {
                "10.255.246.78",
                "10.255.246.81",
                "10.255.246.82",
                "10.255.246.83",
                "10.255.246.84",
                "10.27.9.3",
                "10.27.9.28",
                "10.27.9.29",
                "10.27.9.30",
                "10.27.9.31",
                "10.27.9.32",
                "10.27.9.35",
                "10.248.9.101"
        };

        for (String ip : ips) {
            Matcher matcher = pattern.matcher(ip);
            //System.out.println("IP: " + ip);
            assertTrue(matcher.find());
        }
    }

    @Test
    void test_central_hr_ip_in_range() throws Exception {

        Pattern pattern = Pattern.compile("^(10\\.255\\.191\\.(79|9[8-9]))|(10\\.255\\.82\\.(5[0-2]))|(10.252.194.194)|(10.252.195.19)$");

        String[] ips = {
                "10.252.194.194",
                "10.252.195.19",
                "10.255.191.98",
                "10.255.191.79",
                "10.255.191.99",
                "10.255.82.52",
                "10.255.82.51",
                "10.255.82.50"
        };

        for (String ip : ips) {
            Matcher matcher = pattern.matcher(ip);
            //System.out.println("IP: " + ip);
            assertTrue(matcher.find());
        }
    }

    @Test
    void test_central_card_ip_in_range() throws Exception {

        Pattern pattern = Pattern.compile("^(10\\.255\\.244\\.(14[2-3]|15[2-3]))$");

        String[] ips = {
                "10.255.244.142",
                "10.255.244.143",
                "10.255.244.152",
                "10.255.244.153"
        };

        for (String ip : ips) {
            Matcher matcher = pattern.matcher(ip);
            //System.out.println("IP: " + ip);
            assertTrue(matcher.find());
        }
    }


    @Test
    void test_bomc_ip_in_range() throws Exception {

        Pattern pattern = Pattern.compile("^(172\\.16\\.135\\.(19|2[0-9]|3[0-5]))|(10.1.133.5)$");

        String[] ips = {
                "10.1.133.5",
                "172.16.135.19",
                "172.16.135.20",
                "172.16.135.21",
                "172.16.135.22",
                "172.16.135.23",
                "172.16.135.24",
                "172.16.135.25",
                "172.16.135.26",
                "172.16.135.27",
                "172.16.135.28",
                "172.16.135.29",
                "172.16.135.30",
                "172.16.135.31",
                "172.16.135.32",
                "172.16.135.33",
                "172.16.135.34",
                "172.16.135.35"
        };

        for (String ip : ips) {
            Matcher matcher = pattern.matcher(ip);
            //System.out.println("IP: " + ip);
            assertTrue(matcher.find());
        }
    }


    @Test
    void test_bam_ip_in_range() throws Exception {

        Pattern pattern = Pattern.compile("^(172\\.16\\.135\\.(14[4-7]))$");

        String[] ips = {
                "172.16.135.146",
                "172.16.135.147",
                "172.16.135.144",
                "172.16.135.145"
        };

        for (String ip : ips) {
            Matcher matcher = pattern.matcher(ip);
            //System.out.println("IP: " + ip);
            assertTrue(matcher.find());
        }
    }

    @Test
    void test_ecip_ip_in_range() throws Exception {

        Pattern pattern = Pattern.compile("^(10\\.1\\.128\\.(11[1-3]|19[3-4]))|(173.6.6.156)|(10.255.242.212)$");

        String[] ips = {
                "10.1.128.113",
                "10.1.128.111",
                "10.1.128.193",
                "10.1.128.194",
                "173.6.6.156",
                "10.255.242.212"
        };

        for (String ip : ips) {
            Matcher matcher = pattern.matcher(ip);
            //System.out.println("IP: " + ip);
            assertTrue(matcher.find());
        }
    }


}
